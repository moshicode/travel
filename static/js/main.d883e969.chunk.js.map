{"version":3,"sources":["components/Contact.js","components/contactForm.js","App.js","serviceWorker.js","index.js"],"names":["Contact","props","contact","fName","job","id","address","className","src","alt","aria-hidden","onClick","removeContact","ContactForm","useState","htmlFor","type","placeholder","for","App","company","phone","company_address","img","contacts","setContacts","viewModal","setModal","contactId","newContactList","filter","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iOA6CeA,MA3Cf,SAAiBC,GAAQ,IAAD,EACcA,EAAMC,QAAlCC,EADc,EACdA,MAAOC,EADO,EACPA,IAAKC,EADE,EACFA,GAAIC,EADF,EACEA,QACxB,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,eACb,yBACEA,UAAU,wCACVC,IAAI,gBACJC,IAAI,UAGR,2BAAIL,IAEN,yBAAKG,UAAU,YACb,yBAAKA,UAAU,gBACb,2BAAIJ,GACJ,yBAAKI,UAAU,WACb,8BACE,uBAAGA,UAAU,mBAAmBG,cAAY,UAE9C,8BAAOJ,MAIb,yBAAKC,UAAU,QACb,uBACEA,UAAU,cACVG,cAAY,OACZC,QAAS,kBAAMV,EAAMW,cAAcP,MAErC,uBAAGE,UAAU,YAAYG,cAAY,e,MCIpCG,MAtCf,SAAqBZ,GAAQ,IAAD,EACFa,mBAAS,IADP,mBAE1B,OAF0B,UAGxB,yBAAKP,UAAU,WACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,8BACE,yBAAKA,UAAU,cACb,2BAAOQ,QAAQ,sBAAf,iBACA,2BACEC,KAAK,QACLT,UAAU,eACVF,GAAG,qBACHY,YAAY,WAGhB,yBAAKV,UAAU,cACb,2BAAOW,IAAI,yBAAX,YACA,2BACEF,KAAK,WACLT,UAAU,eACVF,GAAG,wBACHY,YAAY,cAIhB,4BAAQD,KAAK,SAAST,UAAU,mBAAhC,gBCgECY,MAvFf,WAAgB,IAAD,EACmBL,mBAAS,CACvC,CACEX,MAAO,aACPG,QAAS,uBACTc,QAAS,UACThB,IAAK,mBACLiB,MAAO,aACPC,gBAAiB,2BACjBC,IAAK,aACLlB,GAAI,GAEN,CACEF,MAAO,aACPG,QAAS,uBACTc,QAAS,UACThB,IAAK,mBACLiB,MAAO,aACPC,gBAAiB,2BACjBC,IAAK,aACLlB,GAAI,GAEN,CACEF,MAAO,aACPG,QAAS,uBACTc,QAAS,UACThB,IAAK,mBACLiB,MAAO,aACPC,gBAAiB,2BACjBC,IAAK,aACLlB,GAAI,KA9BK,mBACNmB,EADM,KACIC,EADJ,OAkCiBX,oBAAS,GAlC1B,mBAkCNY,EAlCM,KAkCKC,EAlCL,KAiDPf,EAAgB,SAACgB,GACrB,IACIC,EADW,YAAOL,GACWM,QAC/B,SAAC5B,GAAD,OAAaA,EAAQG,KAAOuB,KAE9BH,EAAYI,IAGd,OACE,yBAAKtB,UAAU,OACZmB,GAAa,kBAAC,EAAD,MACd,yBAAKnB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gBACZiB,EAASO,KAAI,SAAC7B,EAAS8B,GAAV,OACZ,kBAAC,EAAD,CACEC,IAAKD,EACL3B,GAAIH,EAAQG,GACZH,QAASA,EACTU,cAAeA,OAGnB,yBAAKL,UAAU,oBACb,gCACE,uBACEA,UAAU,aACVG,cAAY,OACZC,QAAS,kBAAMgB,GAAS,aCtEtBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d883e969.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Contact(props) {\r\n  const { fName, job, id, address } = props.contact;\r\n  return (\r\n    <div className=\"col-md-6\">\r\n      <div className=\"contact panel panel-default\">\r\n        <div className=\"panel-body contact-panel\">\r\n          <div className=\"row\">\r\n            <div className=\"col-xs-5\">\r\n              <div className=\"contact-img\">\r\n                <img\r\n                  className=\"img-circle img-responsive profile-img\"\r\n                  src=\"/Assets/1.jpg\"\r\n                  alt=\"Logo\"\r\n                />\r\n              </div>\r\n              <p>{job}</p>\r\n            </div>\r\n            <div className=\"col-xs-7\">\r\n              <div className=\"contact-info\">\r\n                <p>{fName}</p>\r\n                <div className=\"address\">\r\n                  <span>\r\n                    <i className=\"fa fa-map-marker\" aria-hidden=\"true\"></i>\r\n                  </span>\r\n                  <span>{address}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"ctrl\">\r\n              <i\r\n                className=\"fa fa-trash\"\r\n                aria-hidden=\"true\"\r\n                onClick={() => props.removeContact(id)}\r\n              ></i>\r\n              <i className=\"fa fa-pen\" aria-hidden=\"true\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contact;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction ContactForm(props) {\r\n  const [name, setName] = useState(\"\");\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"exampleInputEmail1\">Email address</label>\r\n                <input\r\n                  type=\"email\"\r\n                  className=\"form-control\"\r\n                  id=\"exampleInputEmail1\"\r\n                  placeholder=\"Email\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label for=\"exampleInputPassword1\">Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  className=\"form-control\"\r\n                  id=\"exampleInputPassword1\"\r\n                  placeholder=\"Password\"\r\n                />\r\n              </div>\r\n\r\n              <button type=\"submit\" className=\"btn btn-default\">\r\n                Submit\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import React, { useState } from \"react\";\nimport Contact from \"./components/Contact\";\n\nimport \"./App.css\";\nimport ContactForm from \"./components/contactForm\";\n\nfunction App() {\n  const [contacts, setContacts] = useState([\n    {\n      fName: \"John Smith\",\n      address: \"Riviera State 32/106\",\n      company: \"Twitter\",\n      job: \"Graphic designer\",\n      phone: \"0544884536\",\n      company_address: \"795 Folsom Ave, Suit 600\",\n      img: \"john-smith\",\n      id: 1,\n    },\n    {\n      fName: \"John Smith\",\n      address: \"Riviera State 32/106\",\n      company: \"Twitter\",\n      job: \"Graphic designer\",\n      phone: \"0544884536\",\n      company_address: \"795 Folsom Ave, Suit 600\",\n      img: \"john-smith\",\n      id: 2,\n    },\n    {\n      fName: \"John Smith\",\n      address: \"Riviera State 32/106\",\n      company: \"Twitter\",\n      job: \"Graphic designer\",\n      phone: \"0544884536\",\n      company_address: \"795 Folsom Ave, Suit 600\",\n      img: \"john-smith\",\n      id: 3,\n    },\n  ]);\n\n  const [viewModal, setModal] = useState(false);\n\n  const generateUID = () => \"_\" + Math.random().toString(36).substr(2, 9);\n\n  const addContact = (newContact) => {\n    const newContactsList = [\n      ...contacts,\n      {\n        ...newContact,\n        id: generateUID(),\n      },\n    ];\n    setContacts(newContactsList);\n  };\n\n  const removeContact = (contactId) => {\n    let contactList = [...contacts];\n    let newContactList = contactList.filter(\n      (contact) => contact.id !== contactId\n    );\n    setContacts(newContactList);\n  };\n\n  return (\n    <div className=\"App\">\n      {viewModal && <ContactForm />}\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"contact-list\">\n            {contacts.map((contact, index) => (\n              <Contact\n                key={index}\n                id={contact.id}\n                contact={contact}\n                removeContact={removeContact}\n              />\n            ))}\n            <div className=\"col-md-6 add-new\">\n              <button>\n                <i\n                  className=\"fa fa-plus\"\n                  aria-hidden=\"true\"\n                  onClick={() => setModal(true)}\n                ></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}